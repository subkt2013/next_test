{"ast":null,"code":"import path from \"path\";\nimport remark from \"remark\";\nimport html from \"remark-html\";\nimport matter from \"gray-matter\";\nimport { formatDate } from \"./date\";\nconst DIR = path.join(process.cwd(), \"content/posts\");\nconst EXTENSION = \".md\";\n/**\n * Markdown のファイル一覧を取得する\n */\n\nconst listContentFiles = ({\n  fs\n}) => {\n  const filenames = fs.readdirSync(DIR);\n  return filenames.filter(filename => path.parse(filename).ext === EXTENSION);\n};\n/**\n * Markdown のファイルの中身をパースして取得する\n */\n\n\nconst readContentFile = async ({\n  fs,\n  slug,\n  filename\n}) => {\n  if (slug === undefined) {\n    slug = path.parse(filename).name;\n  }\n\n  const raw = fs.readFileSync(path.join(DIR, `${slug}${EXTENSION}`), 'utf8');\n  const matterResult = matter(raw);\n  const {\n    title,\n    published: rawPublished\n  } = matterResult.data;\n  const parsedContent = await remark().use(html).process(matterResult.content);\n  const content = parsedContent.toString();\n  return {\n    title,\n    published: formatDate(rawPublished),\n    content,\n    slug\n  };\n};\n\nexport { listContentFiles, readContentFile };","map":{"version":3,"sources":["/Users/tatekazuki/local_dev/next-test/lib/content-loader.js"],"names":["path","remark","html","matter","formatDate","DIR","join","process","cwd","EXTENSION","listContentFiles","fs","filenames","readdirSync","filter","filename","parse","ext","readContentFile","slug","undefined","name","raw","readFileSync","matterResult","title","published","rawPublished","data","parsedContent","use","content","toString"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,UAAT,QAA2B,QAA3B;AACA,MAAMC,GAAG,GAAGL,IAAI,CAACM,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,eAAzB,CAAZ;AACA,MAAMC,SAAS,GAAG,KAAlB;AACA;AACA;AACA;;AACA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAY;AACnC,QAAMC,SAAS,GAAGD,EAAE,CAACE,WAAH,CAAeR,GAAf,CAAlB;AACA,SAAOO,SAAS,CACbE,MADI,CACIC,QAAD,IAAcf,IAAI,CAACgB,KAAL,CAAWD,QAAX,EAAqBE,GAArB,KAA6BR,SAD9C,CAAP;AAED,CAJD;AAKA;AACA;AACA;;;AACA,MAAMS,eAAe,GAAG,OAAO;AAAEP,EAAAA,EAAF;AAAMQ,EAAAA,IAAN;AAAYJ,EAAAA;AAAZ,CAAP,KAAkC;AACxD,MAAII,IAAI,KAAKC,SAAb,EAAwB;AACtBD,IAAAA,IAAI,GAAGnB,IAAI,CAACgB,KAAL,CAAWD,QAAX,EAAqBM,IAA5B;AACD;;AACD,QAAMC,GAAG,GAAGX,EAAE,CAACY,YAAH,CAAgBvB,IAAI,CAACM,IAAL,CAAUD,GAAV,EAAgB,GAAEc,IAAK,GAAEV,SAAU,EAAnC,CAAhB,EAAuD,MAAvD,CAAZ;AACA,QAAMe,YAAY,GAAGrB,MAAM,CAACmB,GAAD,CAA3B;AACA,QAAM;AAAEG,IAAAA,KAAF;AAASC,IAAAA,SAAS,EAAEC;AAApB,MAAqCH,YAAY,CAACI,IAAxD;AACA,QAAMC,aAAa,GAAG,MAAM5B,MAAM,GAC/B6B,GADyB,CACrB5B,IADqB,EAEzBK,OAFyB,CAEjBiB,YAAY,CAACO,OAFI,CAA5B;AAGA,QAAMA,OAAO,GAAGF,aAAa,CAACG,QAAd,EAAhB;AACA,SAAO;AACLP,IAAAA,KADK;AAELC,IAAAA,SAAS,EAAEtB,UAAU,CAACuB,YAAD,CAFhB;AAGLI,IAAAA,OAHK;AAILZ,IAAAA;AAJK,GAAP;AAMD,CAjBD;;AAkBA,SAAST,gBAAT,EAA2BQ,eAA3B","sourcesContent":["import path from \"path\"\nimport remark from \"remark\"\nimport html from \"remark-html\"\nimport matter from \"gray-matter\"\nimport { formatDate } from \"./date\"\nconst DIR = path.join(process.cwd(), \"content/posts\")\nconst EXTENSION = \".md\"\n/**\n * Markdown のファイル一覧を取得する\n */\nconst listContentFiles = ({ fs }) => {\n  const filenames = fs.readdirSync(DIR)\n  return filenames\n    .filter((filename) => path.parse(filename).ext === EXTENSION)\n}\n/**\n * Markdown のファイルの中身をパースして取得する\n */\nconst readContentFile = async ({ fs, slug, filename }) => {\n  if (slug === undefined) {\n    slug = path.parse(filename).name\n  }\n  const raw = fs.readFileSync(path.join(DIR, `${slug}${EXTENSION}`), 'utf8')\n  const matterResult = matter(raw)\n  const { title, published: rawPublished } = matterResult.data\n  const parsedContent = await remark()\n    .use(html)\n    .process(matterResult.content)\n  const content = parsedContent.toString()\n  return {\n    title,\n    published: formatDate(rawPublished),\n    content,\n    slug,\n  }\n}\nexport { listContentFiles, readContentFile }"]},"metadata":{},"sourceType":"module"}